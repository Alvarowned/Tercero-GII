(define (domain domainRocket)
    (:requirements :equality :fluents :negative-preconditions :typing :conditional-effects)
    (:types rocket location astronaut cargo)
    (:functions (costFuel)
                (capacityCargo ?r - rocket)
                (capacityAstronauts ?r - rocket)
    )
    (:predicates (at ?x - (either rocket cargo astronaut) ?l - location)
                 (into ?r - rocket ?x - (either cargo astronaut))
                 (traveling ?r - rocket)
                 (cannotTravel ?r)
                 (onRocket ?x - (either cargo astronaut))
    )
    
    (:action getPersonInRocket
        :parameters (?r - rocket ?a - astronaut ?l - location)
        :precondition (and (at ?r ?l)
                           (at ?a ?l)
                           (not (cannotTravel ?r))
                           (not (traveling ?r))
                           (not (onRocket ?a))
                           (> (capacityAstronauts ?r) 0))
        :effect (and (onRocket ?a)
                     (into ?r ?a)
                     (decrease (capacityAstronauts ?r) 1))
    )
    (:action getCargoInRocket
        :parameters (?r - rocket ?c - cargo ?l - location)
        :precondition (and (at ?r ?l)
                           (at ?c ?l)
                           (not (cannotTravel ?r))
                           (not (traveling ?r))
                           (not (onRocket ?c))
                           (> (capacityCargo ?r) 0))
        :effect (and (onRocket ?c)
                     (into ?r ?c)
                     (decrease (capacityCargo ?r) 1))
    )
    (:action rocketToSpace
        :parameters (?r - rocket ?l - location)
        :precondition (and (at ?r ?l)
                           (not (traveling ?r))
                           (not (cannotTravel ?r)))
        :effect (and (not (at ?r ?l))
                     (traveling ?r)
                     (increase (costFuel) 200)
                     (forall (?x - (either cargo astronaut))
                        (when (and (into ?r ?x))
                              (and (not (at ?x ?l))
                                   (increase (costFuel) 20))
                        )
                     )
        )
    )
    (:action moveRocket
        :parameters (?r - rocket ?l - location)
        :precondition (and (traveling ?r)
                           (not (at ?r ?l)))
        :effect (and (at ?r ?l)
                     (not (traveling ?r))
                     (cannotTravel ?r)
                     (increase (costFuel) 50)
                     (forall (?x - (either cargo astronaut))
                        (when (and (into ?r ?x))
                              (and (not (into ?r ?x))
                                   (at ?x ?l)
                                   (increase (costFuel) 5))
                        )
                     )
        )
    ) 
)