(define (domain domainRobotMotion)
    (:requirements :equality :negative-preconditions :typing)
    (:types robot location box lightSwitch door)
    (:predicates (at ?x - (either robot box lightSwitch) ?loc - location)
                 (onABox ?r - robot)
                 (on ?r - robot ?b - box)
                 (turnedOn ?ls - lightSwitch)
                 (open ?d - door)
                 (nextTo ?d - door ?l1 - location ?l2 - location)
    )
    
    (:action go
        :parameters (?r - robot ?d - door ?l1 - location ?l2 - location)
        :precondition (and (at ?r ?l1)
                           (not (onABox ?r))
                           (not (= ?l1 ?l2))
                           (open ?d)
                           (nextTo ?d ?l1 ?l2))
        :effect (and (not (at ?r ?l1))
                     (at ?r ?l2))
    )
    
    (:action openDoor
        :parameters (?r - robot ?d - door ?l1 - location ?l2 - location)
        :precondition (and (at ?r ?l1)
                           (not (onABox ?r))
                           (nextTo ?d ?l1 ?l2)
                           (not (= ?l1 ?l2))
                           (not (open ?d)))
        :effect (and (open ?d))
    )
    
    (:action closeDoor
        :parameters (?r - robot ?d - door ?l1 - location ?l2 - location)
        :precondition (and (at ?r ?l1)
                           (not (onABox ?r))
                           (nextTo ?d ?l1 ?l2)
                           (not (= ?l1 ?l2))
                           (open ?d))
        :effect (and (not (open ?d)))
    )
    
    (:action pushBox
        :parameters (?r - robot ?b - box ?l1 - location ?l2 - location ?d - door)
        :precondition (and (at ?r ?l1)
                           (not (= ?l1 ?l2))
                           (at ?b ?l1)
                           (not (onABox ?r))
                           (nextTo ?d ?l1 ?l2)
                           (open ?d))
        :effect (and (not (at ?b ?l1))
                     (at ?b ?l2))
    )
    
    (:action climbUp
        :parameters (?r - robot ?b - box ?l - location)
        :precondition (and (at ?r ?l)
                           (at ?b ?l)
                           (not (onABox ?r)))
        :effect (and (on ?r ?b)
                     (onABox ?r))
    )
    
    (:action climbDown
        :parameters (?r - robot ?b - box ?l - location)
        :precondition (and (at ?r ?l)
                           (at ?b ?l)
                           (onABox ?r)
                           (on ?r ?b))
        :effect (and (not (on ?r ?b))
                     (not (onABox ?r)))
    )
    
    (:action switchLightOn
        :parameters (?r - robot ?b - box ?ls - lightSwitch ?l - location)
        :precondition (and (at ?r ?l)
                           (at ?b ?l)
                           (at ?ls ?l)
                           (on ?r ?b)
                           (not (turnedOn ?ls)))
        :effect (and (turnedOn ?ls))
    )
    
    (:action switchLightOff
        :parameters (?r - robot ?b - box ?ls - lightSwitch ?l - location)
        :precondition (and (at ?r ?l)
                           (at ?b ?l)
                           (at ?ls ?l)
                           (on ?r ?b)
                           (turnedOn ?ls))
        :effect (and (not (turnedOn ?ls)))
    )
)