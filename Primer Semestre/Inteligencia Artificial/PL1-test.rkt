#lang racket
(require "PL1.rkt" rackunit)

(define test0 '((6 0 0 0 3 0 0 2 0)
                (0 4 0 0 0 8 0 0 0)
                (8 5 0 2 7 0 1 0 0)
                (3 0 0 0 0 0 6 7 0)
                (0 0 0 0 2 0 0 0 0)
                (0 6 1 0 0 0 0 0 5)
                (0 0 4 0 1 9 0 8 3)
                (0 0 0 4 0 0 0 1 0)
                (0 8 0 0 5 0 0 0 6)))

(define test1 '((5 0 0 0 0 0 0 0 0)
                (0 2 8 4 0 0 5 0 3)
                (1 0 0 2 7 0 0 0 6)
                (0 0 3 0 5 2 1 9 0)
                (7 0 6 0 1 0 2 0 8)
                (0 1 9 7 4 0 3 0 0)
                (6 0 0 0 9 4 0 0 2)
                (8 0 1 0 0 6 7 5 0)
                (0 0 0 0 0 0 0 0 4)))

(define test2 '((5 6 0 0 0 4 1 0 0)
                (0 7 0 6 0 0 0 3 0)
                (0 0 0 1 2 0 0 6 0)
                (0 0 0 3 0 8 6 9 2)
                (0 8 0 0 7 0 0 4 0)
                (4 3 2 9 0 6 0 0 0)
                (0 5 0 0 9 7 0 0 0)
                (0 2 0 0 0 1 0 5 0)
                (0 0 9 5 0 0 0 8 6)))

(define test3 '((0 0 4 0 3 0 0 6 0)
                (1 6 0 0 0 2 0 3 0)
                (9 0 2 8 0 6 4 5 0)
                (0 0 0 0 6 0 9 1 0)
                (0 0 0 0 0 0 0 0 0)
                (0 1 8 0 5 0 0 0 0)
                (0 2 6 1 0 5 3 0 4)
                (0 7 0 6 0 0 0 8 2)
                (0 4 0 0 2 0 6 0 0)))

(define test4 '((0 0 0 0 0 4 8 0 0)
                (0 2 0 0 0 3 0 1 0)
                (6 0 1 0 0 0 7 0 5)
                (5 8 0 0 0 9 0 7 0)
                (0 0 4 0 0 0 5 0 0)
                (0 1 0 7 0 0 0 8 6)
                (4 0 3 0 0 0 9 0 2)
                (0 6 0 3 0 0 0 4 0)
                (0 0 2 6 0 0 0 0 0)))

(define test5 '((9 0 8 0 0 2 0 0 0)
                (0 0 0 0 7 0 0 5 8)
                (0 7 0 0 0 9 0 0 0)
                (0 9 4 0 1 8 5 0 7)
                (5 0 0 0 9 0 0 0 1)
                (2 0 1 7 6 0 3 9 0)
                (0 0 0 5 0 0 0 3 0)
                (8 1 0 0 3 0 0 0 0)
                (0 0 0 9 0 0 7 0 6)))

(define test6 '((0 1 0 9 4 2 7 0 0)
                (0 0 0 6 0 0 2 0 0)
                (2 0 0 0 7 1 9 0 0)
                (4 8 0 0 0 0 0 0 2)
                (7 0 0 0 0 0 0 0 9)
                (1 0 0 0 0 0 0 8 6)
                (0 0 7 8 2 0 0 0 1)
                (0 0 1 0 0 9 0 0 0)
                (0 0 8 5 1 6 0 2 0)))

(define test7 '((6 1 0 3 5 4 0 9 0)
                (0 9 0 0 0 0 0 0 4)
                (8 4 0 0 9 0 6 1 0)
                (0 3 0 4 0 0 8 0 0)
                (0 0 0 9 6 1 0 0 0)
                (0 0 1 0 0 3 0 5 0)
                (0 6 4 0 3 0 0 8 2)
                (2 0 0 0 0 0 0 3 0)
                (0 8 0 5 1 2 0 6 9)))

(define test8 '((5 0 0 3 4 0 0 0 1)
                (0 1 4 0 0 6 3 7 0)
                (7 0 3 9 0 8 4 0 0)
                (2 7 9 0 0 0 0 0 0)
                (0 4 0 0 0 0 0 3 0)
                (0 0 0 0 0 0 6 1 7)
                (0 0 7 2 0 3 8 0 6)
                (0 5 6 8 0 0 1 2 0)
                (8 0 0 0 6 4 0 0 9)))

(define test9 '((0 0 5 0 0 7 0 6 8)
                (0 0 0 0 0 0 0 0 0)
                (9 8 0 6 3 0 2 7 0)
                (0 0 6 1 0 0 0 2 4)
                (0 0 0 0 4 0 0 0 0)
                (2 3 0 0 0 8 9 0 0)
                (0 5 8 0 1 3 0 9 2)
                (0 0 0 0 0 0 0 0 0)
                (4 6 0 2 0 0 5 0 0)))

(define test10 '((1 0 0 0 9 6 0 0 0)
                 (0 9 0 3 5 7 0 6 8)
                 (0 0 0 0 8 0 7 0 0)
                 (0 1 0 7 0 0 6 5 0)
                 (0 0 0 0 0 0 0 0 0)
                 (0 3 4 0 0 9 0 8 0)
                 (0 0 1 0 7 0 0 0 0)
                 (9 8 0 1 6 4 0 7 0)
                 (0 0 0 5 3 0 0 0 6)))

(define test11 '((0 0 0 2 1 9 0 0 6)
                 (0 2 7 6 0 0 0 0 5)
                 (0 0 0 5 0 3 8 0 0)
                 (1 0 0 0 9 0 0 6 0)
                 (7 0 0 1 0 8 0 0 3)
                 (0 9 0 0 4 0 0 0 7)
                 (0 0 9 8 0 1 0 0 0)
                 (8 0 0 0 0 6 5 3 0)
                 (5 0 0 9 3 7 0 0 0)))

(define test12 '((3 5 0 2 0 0 8 9 0)
                 (0 4 0 7 0 8 0 0 0)
                 (1 0 8 0 3 0 0 0 0)
                 (4 0 5 0 7 2 0 1 0)
                 (0 0 6 8 0 1 9 0 0)
                 (0 9 0 3 5 0 2 0 7)
                 (0 0 0 0 2 0 3 0 5)
                 (0 0 0 6 0 5 0 2 0)
                 (0 1 2 0 0 3 0 6 9)))

(define test13 '((1 6 0 9 3 0 0 8 0)
                 (0 0 0 1 0 0 0 0 9)
                 (0 0 0 8 5 0 1 3 0)
                 (9 0 5 0 1 0 6 4 2)
                 (0 0 0 0 0 0 0 0 0)
                 (4 8 2 0 6 0 5 0 1)
                 (0 4 3 0 8 2 0 0 0)
                 (5 0 0 0 0 3 0 0 0)
                 (0 2 0 0 9 1 0 5 6)))

(define test14 '((0 0 0 0 6 3 0 5 4)
                 (1 0 5 7 0 0 0 2 3)
                 (0 6 7 0 0 2 0 0 0)
                 (0 0 0 0 4 0 3 8 6)
                 (8 0 0 5 0 6 0 0 1)
                 (4 1 6 0 9 0 0 0 0)
                 (0 0 0 8 0 0 1 6 0)
                 (6 3 0 0 0 7 8 0 5)
                 (7 8 0 6 1 0 0 0 0)))

(define test15 '((0 5 4 6 2 0 0 0 0)
                 (6 0 7 0 0 8 0 3 1)
                 (8 0 0 0 0 5 2 0 4)
                 (0 0 0 9 0 1 0 7 0)
                 (7 0 0 5 0 4 0 0 6)
                 (0 9 0 7 0 2 0 0 0)
                 (3 0 1 8 0 0 0 0 2)
                 (2 8 0 3 0 0 4 0 9)
                 (0 0 0 0 1 6 3 8 0)))

(define test16 '((9 7 0 0 0 3 4 5 0)
                 (1 0 0 0 2 4 0 3 0)
                 (4 3 0 0 0 9 2 0 6)
                 (7 0 4 8 0 0 0 0 0)
                 (0 9 0 0 0 0 0 8 0)
                 (0 0 0 0 0 2 7 0 5)
                 (2 0 7 9 0 0 0 6 8)
                 (0 4 0 3 6 0 0 0 7)
                 (0 5 3 2 0 0 0 9 4)))

(define test17 '((3 0 8 0 0 0 0 0 0)
                 (0 0 0 0 4 0 5 0 7)
                 (6 7 0 0 5 8 0 1 9)
                 (1 8 0 0 0 0 0 0 0)
                 (7 9 0 8 2 3 0 4 5)
                 (0 0 0 0 0 0 0 9 3)
                 (4 6 0 7 8 0 0 3 1)
                 (2 0 9 0 1 0 0 0 0)
                 (0 0 0 0 0 0 4 0 6)))

(define test18 '((0 7 6 0 0 3 0 0 0)
                 (0 0 0 8 0 0 6 0 0)
                 (3 0 0 0 5 0 0 2 4)
                 (7 8 3 5 0 0 0 9 0)
                 (1 2 9 6 0 8 7 4 5)
                 (0 4 0 0 0 7 8 1 3)
                 (8 5 0 0 6 0 0 0 2)
                 (0 0 7 0 0 1 0 0 0)
                 (0 0 0 4 0 0 3 8 0)))

(define test19 '((0 0 0 0 0 8 0 0 0)
                 (3 0 8 0 0 0 7 0 0)
                 (2 9 4 7 0 0 0 8 1)
                 (4 0 0 8 6 0 0 7 0)
                 (0 0 0 0 0 0 0 0 0)
                 (0 7 0 0 9 2 0 0 6)
                 (6 5 0 0 0 1 2 4 3)
                 (0 0 3 0 0 0 8 0 9)
                 (0 0 0 5 0 0 0 0 0)))

(define test20 '((8 0 0 4 6 0 0 0 0)
                 (0 0 0 0 1 0 0 0 9)
                 (0 7 0 3 0 8 6 0 0)
                 (2 0 0 0 0 0 0 9 0)
                 (3 8 0 0 7 0 0 2 1)
                 (0 5 0 0 0 0 0 0 8)
                 (0 0 4 5 0 6 0 1 0)
                 (5 0 0 4 0 0 0 0 0)
                 (0 0 0 0 9 3 0 0 6)))

(check-equal? (push (push structVacia test1) test2) (append test2 test1))        ; prueba de push
(check-equal? (pop (list test1)) test1)                                          ; prueba de push
(check-equal? (resto (list test1 test2 test3)) (list test2 test3))               ; prueba de resto

(check-equal? (comprobarNotRepFila test20 0 3 (getValor test20 0 3)) #t)         ; prueba de comprobarNotRepFila
(check-equal? (comprobarValidezCasilla test20 0 3) #f)                           ; prueba comprobarValidezCasilla

(check-equal? (comprobarValidezSudoku test20) #f)
(check-equal? (comprobarValidezSudoku test1) #t)                                 ; prueba de comprobarValidezSudoku

(check-equal? (solucionProfR test1 structVacia) #f)                              ; prueba del algoritmo para la solucion en profundidad
; (check-equal? (solucionAnchR test1 structVacia) #f)                              ; prueba del algoritmo para la solucion en anchura